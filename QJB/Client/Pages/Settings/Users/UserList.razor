@page "/Setting/User/UserList"
@using QJB.Shared

<div style="margin: 0 0 20px 10px;">
    <Row>
        <Col Span="2">
        <Text Style="vertical-align:middle">用户姓名：</Text>
        </Col>
        <Col Span="6">
        <Input @bind-Value="@txtDisplayName" />
        </Col>
        <Col Offset="1" Span="7">
        <Button Type="dashed" OnClick="() => { this.OnInitializedAsync(); }" Icon="search">查询</Button>
        <Button Type="dashed" OnClick="() => { this.txtDisplayName = string.Empty; this.OnInitializedAsync(); }" Icon="redo">重置</Button>
        </Col>
        <Col Offset="6" Span="2">
        <Button Icon="plus" Type="primary" @onclick="() => EventNew()">新增</Button>
        </Col>
    </Row>
</div>

<Table @ref="table" TItem="UserVModel" DataSource="@data" Total="_total" Size="TableSize.Small"
       OnPageIndexChange="() => { this.OnInitializedAsync(); }"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize">
    <Selection Key="@(context.UserCode)" />
    <Column Style="display:none" Title="用户编码" @bind-Field="@context.UserCode" />
    <Column Title="用户账号" @bind-Field="@context.UserName" />
    <Column Title="用户姓名" @bind-Field="@context.DisplayName" />
    <Column Title="手机" @bind-Field="@context.Phone" />
    <Column Title="性别" @bind-Field="@context.Sex" />
    <Column Title="创建日期" @bind-Field="@context.CreateDate" Format="yyyy-MM-dd" />
    <ActionColumn Title="操作">
        <Space>
            <SpaceItem>
                <Button Size="small" Type="link" Icon="edit" OnClick="()=>EventEdit(context.UserCode)">
                    编辑
                </Button>
                <Button Size="small" Type="link" Danger Icon="delete">
                    删除
                </Button>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<UserView _visible="UserViewVisible" @ref="userView" _evenCloseUserView="CloseUserView" _userInfo="user" />

@code
{
    bool UserViewVisible;

    UserVModel user = new UserVModel();

    UserView userView;

    void CloseUserView()
    {
        UserViewVisible = false;
    }

    void EventNew()
    {
        userView.ClearErrors();

        user = new UserVModel();

        UserViewVisible = true;
    }

    async Task EventEdit(string userCode)
    {
        userView.ClearErrors();

        user = await http.GetFromJsonAsync<UserVModel>($"User/GetUserByCode?userCode={userCode}");

        UserViewVisible = true;
    }
}

@*@if (selectedRows != null && selectedRows.Any())
    {
        <Button Danger Size="small" OnClick="@(e => { selectedRows = null; })">Clear</Button>

        @foreach (var selected in selectedRows)
        {
            <Tag @key="selected.Id" Closable OnClose="e=>RemoveSelection(selected.Id)">@selected.Id - @selected.Summary</Tag>
        }
    }*@

